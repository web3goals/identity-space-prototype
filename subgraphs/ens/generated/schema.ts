// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Domain extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Domain entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Domain must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Domain", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Domain | null {
    return changetype<Domain | null>(store.get_in_block("Domain", id));
  }

  static load(id: string): Domain | null {
    return changetype<Domain | null>(store.get("Domain", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get labelName(): string | null {
    let value = this.get("labelName");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set labelName(value: string | null) {
    if (!value) {
      this.unset("labelName");
    } else {
      this.set("labelName", Value.fromString(<string>value));
    }
  }

  get labelhash(): Bytes | null {
    let value = this.get("labelhash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set labelhash(value: Bytes | null) {
    if (!value) {
      this.unset("labelhash");
    } else {
      this.set("labelhash", Value.fromBytes(<Bytes>value));
    }
  }

  get parent(): string | null {
    let value = this.get("parent");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parent(value: string | null) {
    if (!value) {
      this.unset("parent");
    } else {
      this.set("parent", Value.fromString(<string>value));
    }
  }

  get subdomains(): DomainLoader {
    return new DomainLoader("Domain", this.get("id")!.toString(), "subdomains");
  }

  get subdomainCount(): i32 {
    let value = this.get("subdomainCount");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI32();
    }
  }

  set subdomainCount(value: i32) {
    this.set("subdomainCount", Value.fromI32(value));
  }

  get resolvedAddress(): string | null {
    let value = this.get("resolvedAddress");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resolvedAddress(value: string | null) {
    if (!value) {
      this.unset("resolvedAddress");
    } else {
      this.set("resolvedAddress", Value.fromString(<string>value));
    }
  }

  get resolver(): string | null {
    let value = this.get("resolver");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set resolver(value: string | null) {
    if (!value) {
      this.unset("resolver");
    } else {
      this.set("resolver", Value.fromString(<string>value));
    }
  }

  get ttl(): BigInt | null {
    let value = this.get("ttl");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set ttl(value: BigInt | null) {
    if (!value) {
      this.unset("ttl");
    } else {
      this.set("ttl", Value.fromBigInt(<BigInt>value));
    }
  }

  get isMigrated(): boolean {
    let value = this.get("isMigrated");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isMigrated(value: boolean) {
    this.set("isMigrated", Value.fromBoolean(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get owner(): string {
    let value = this.get("owner");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get registrant(): string | null {
    let value = this.get("registrant");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set registrant(value: string | null) {
    if (!value) {
      this.unset("registrant");
    } else {
      this.set("registrant", Value.fromString(<string>value));
    }
  }

  get wrappedOwner(): string | null {
    let value = this.get("wrappedOwner");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set wrappedOwner(value: string | null) {
    if (!value) {
      this.unset("wrappedOwner");
    } else {
      this.set("wrappedOwner", Value.fromString(<string>value));
    }
  }

  get expiryDate(): BigInt | null {
    let value = this.get("expiryDate");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set expiryDate(value: BigInt | null) {
    if (!value) {
      this.unset("expiryDate");
    } else {
      this.set("expiryDate", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Account extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Account entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Account must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Account", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Account | null {
    return changetype<Account | null>(store.get_in_block("Account", id));
  }

  static load(id: string): Account | null {
    return changetype<Account | null>(store.get("Account", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domains(): DomainLoader {
    return new DomainLoader("Account", this.get("id")!.toString(), "domains");
  }
}

export class Resolver extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Resolver entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Resolver must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Resolver", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Resolver | null {
    return changetype<Resolver | null>(store.get_in_block("Resolver", id));
  }

  static load(id: string): Resolver | null {
    return changetype<Resolver | null>(store.get("Resolver", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get domain(): string | null {
    let value = this.get("domain");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set domain(value: string | null) {
    if (!value) {
      this.unset("domain");
    } else {
      this.set("domain", Value.fromString(<string>value));
    }
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get addr(): string | null {
    let value = this.get("addr");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set addr(value: string | null) {
    if (!value) {
      this.unset("addr");
    } else {
      this.set("addr", Value.fromString(<string>value));
    }
  }

  get contentHash(): Bytes | null {
    let value = this.get("contentHash");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set contentHash(value: Bytes | null) {
    if (!value) {
      this.unset("contentHash");
    } else {
      this.set("contentHash", Value.fromBytes(<Bytes>value));
    }
  }

  get texts(): Array<string> | null {
    let value = this.get("texts");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set texts(value: Array<string> | null) {
    if (!value) {
      this.unset("texts");
    } else {
      this.set("texts", Value.fromStringArray(<Array<string>>value));
    }
  }

  get coinTypes(): Array<BigInt> | null {
    let value = this.get("coinTypes");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigIntArray();
    }
  }

  set coinTypes(value: Array<BigInt> | null) {
    if (!value) {
      this.unset("coinTypes");
    } else {
      this.set("coinTypes", Value.fromBigIntArray(<Array<BigInt>>value));
    }
  }
}

export class DomainLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Domain[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Domain[]>(value);
  }
}
