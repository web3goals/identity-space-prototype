// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ChangeRecoveryAddress extends ethereum.Event {
  get params(): ChangeRecoveryAddress__Params {
    return new ChangeRecoveryAddress__Params(this);
  }
}

export class ChangeRecoveryAddress__Params {
  _event: ChangeRecoveryAddress;

  constructor(event: ChangeRecoveryAddress) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recovery(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class DisableTrustedOnly extends ethereum.Event {
  get params(): DisableTrustedOnly__Params {
    return new DisableTrustedOnly__Params(this);
  }
}

export class DisableTrustedOnly__Params {
  _event: DisableTrustedOnly;

  constructor(event: DisableTrustedOnly) {
    this._event = event;
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class OwnershipTransferStarted extends ethereum.Event {
  get params(): OwnershipTransferStarted__Params {
    return new OwnershipTransferStarted__Params(this);
  }
}

export class OwnershipTransferStarted__Params {
  _event: OwnershipTransferStarted;

  constructor(event: OwnershipTransferStarted) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Recover extends ethereum.Event {
  get params(): Recover__Params {
    return new Recover__Params(this);
  }
}

export class Recover__Params {
  _event: Recover;

  constructor(event: Recover) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Register extends ethereum.Event {
  get params(): Register__Params {
    return new Register__Params(this);
  }
}

export class Register__Params {
  _event: Register;

  constructor(event: Register) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get recovery(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SetTrustedCaller extends ethereum.Event {
  get params(): SetTrustedCaller__Params {
    return new SetTrustedCaller__Params(this);
  }
}

export class SetTrustedCaller__Params {
  _event: SetTrustedCaller;

  constructor(event: SetTrustedCaller) {
    this._event = event;
  }

  get oldCaller(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newCaller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class IdRegistry__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class IdRegistry extends ethereum.SmartContract {
  static bind(address: Address): IdRegistry {
    return new IdRegistry("IdRegistry", address);
  }

  CHANGE_RECOVERY_ADDRESS_TYPEHASH(): Bytes {
    let result = super.call(
      "CHANGE_RECOVERY_ADDRESS_TYPEHASH",
      "CHANGE_RECOVERY_ADDRESS_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_CHANGE_RECOVERY_ADDRESS_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "CHANGE_RECOVERY_ADDRESS_TYPEHASH",
      "CHANGE_RECOVERY_ADDRESS_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  REGISTER_TYPEHASH(): Bytes {
    let result = super.call(
      "REGISTER_TYPEHASH",
      "REGISTER_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_REGISTER_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "REGISTER_TYPEHASH",
      "REGISTER_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  TRANSFER_TYPEHASH(): Bytes {
    let result = super.call(
      "TRANSFER_TYPEHASH",
      "TRANSFER_TYPEHASH():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_TRANSFER_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "TRANSFER_TYPEHASH",
      "TRANSFER_TYPEHASH():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  VERSION(): string {
    let result = super.call("VERSION", "VERSION():(string)", []);

    return result[0].toString();
  }

  try_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall("VERSION", "VERSION():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  domainSeparatorV4(): Bytes {
    let result = super.call(
      "domainSeparatorV4",
      "domainSeparatorV4():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_domainSeparatorV4(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "domainSeparatorV4",
      "domainSeparatorV4():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  eip712Domain(): IdRegistry__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );

    return new IdRegistry__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray()
    );
  }

  try_eip712Domain(): ethereum.CallResult<IdRegistry__eip712DomainResult> {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new IdRegistry__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray()
      )
    );
  }

  hashTypedDataV4(structHash: Bytes): Bytes {
    let result = super.call(
      "hashTypedDataV4",
      "hashTypedDataV4(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(structHash)]
    );

    return result[0].toBytes();
  }

  try_hashTypedDataV4(structHash: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "hashTypedDataV4",
      "hashTypedDataV4(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(structHash)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  idCounter(): BigInt {
    let result = super.call("idCounter", "idCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_idCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("idCounter", "idCounter():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  idOf(owner: Address): BigInt {
    let result = super.call("idOf", "idOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_idOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("idOf", "idOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  pendingOwner(): Address {
    let result = super.call("pendingOwner", "pendingOwner():(address)", []);

    return result[0].toAddress();
  }

  try_pendingOwner(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingOwner", "pendingOwner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  recoveryOf(fid: BigInt): Address {
    let result = super.call("recoveryOf", "recoveryOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(fid)
    ]);

    return result[0].toAddress();
  }

  try_recoveryOf(fid: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("recoveryOf", "recoveryOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(fid)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  register(recovery: Address): BigInt {
    let result = super.call("register", "register(address):(uint256)", [
      ethereum.Value.fromAddress(recovery)
    ]);

    return result[0].toBigInt();
  }

  try_register(recovery: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("register", "register(address):(uint256)", [
      ethereum.Value.fromAddress(recovery)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  registerFor(
    to: Address,
    recovery: Address,
    deadline: BigInt,
    sig: Bytes
  ): BigInt {
    let result = super.call(
      "registerFor",
      "registerFor(address,address,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(recovery),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBytes(sig)
      ]
    );

    return result[0].toBigInt();
  }

  try_registerFor(
    to: Address,
    recovery: Address,
    deadline: BigInt,
    sig: Bytes
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "registerFor",
      "registerFor(address,address,uint256,bytes):(uint256)",
      [
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromAddress(recovery),
        ethereum.Value.fromUnsignedBigInt(deadline),
        ethereum.Value.fromBytes(sig)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trustedCaller(): Address {
    let result = super.call("trustedCaller", "trustedCaller():(address)", []);

    return result[0].toAddress();
  }

  try_trustedCaller(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "trustedCaller",
      "trustedCaller():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  trustedOnly(): BigInt {
    let result = super.call("trustedOnly", "trustedOnly():(uint256)", []);

    return result[0].toBigInt();
  }

  try_trustedOnly(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("trustedOnly", "trustedOnly():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  trustedRegister(to: Address, recovery: Address): BigInt {
    let result = super.call(
      "trustedRegister",
      "trustedRegister(address,address):(uint256)",
      [ethereum.Value.fromAddress(to), ethereum.Value.fromAddress(recovery)]
    );

    return result[0].toBigInt();
  }

  try_trustedRegister(
    to: Address,
    recovery: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "trustedRegister",
      "trustedRegister(address,address):(uint256)",
      [ethereum.Value.fromAddress(to), ethereum.Value.fromAddress(recovery)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  verifyFidSignature(
    custodyAddress: Address,
    fid: BigInt,
    digest: Bytes,
    sig: Bytes
  ): boolean {
    let result = super.call(
      "verifyFidSignature",
      "verifyFidSignature(address,uint256,bytes32,bytes):(bool)",
      [
        ethereum.Value.fromAddress(custodyAddress),
        ethereum.Value.fromUnsignedBigInt(fid),
        ethereum.Value.fromFixedBytes(digest),
        ethereum.Value.fromBytes(sig)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyFidSignature(
    custodyAddress: Address,
    fid: BigInt,
    digest: Bytes,
    sig: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyFidSignature",
      "verifyFidSignature(address,uint256,bytes32,bytes):(bool)",
      [
        ethereum.Value.fromAddress(custodyAddress),
        ethereum.Value.fromUnsignedBigInt(fid),
        ethereum.Value.fromFixedBytes(digest),
        ethereum.Value.fromBytes(sig)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _initialOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall extends ethereum.Call {
  get inputs(): AcceptOwnershipCall__Inputs {
    return new AcceptOwnershipCall__Inputs(this);
  }

  get outputs(): AcceptOwnershipCall__Outputs {
    return new AcceptOwnershipCall__Outputs(this);
  }
}

export class AcceptOwnershipCall__Inputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class AcceptOwnershipCall__Outputs {
  _call: AcceptOwnershipCall;

  constructor(call: AcceptOwnershipCall) {
    this._call = call;
  }
}

export class ChangeRecoveryAddressCall extends ethereum.Call {
  get inputs(): ChangeRecoveryAddressCall__Inputs {
    return new ChangeRecoveryAddressCall__Inputs(this);
  }

  get outputs(): ChangeRecoveryAddressCall__Outputs {
    return new ChangeRecoveryAddressCall__Outputs(this);
  }
}

export class ChangeRecoveryAddressCall__Inputs {
  _call: ChangeRecoveryAddressCall;

  constructor(call: ChangeRecoveryAddressCall) {
    this._call = call;
  }

  get recovery(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeRecoveryAddressCall__Outputs {
  _call: ChangeRecoveryAddressCall;

  constructor(call: ChangeRecoveryAddressCall) {
    this._call = call;
  }
}

export class ChangeRecoveryAddressForCall extends ethereum.Call {
  get inputs(): ChangeRecoveryAddressForCall__Inputs {
    return new ChangeRecoveryAddressForCall__Inputs(this);
  }

  get outputs(): ChangeRecoveryAddressForCall__Outputs {
    return new ChangeRecoveryAddressForCall__Outputs(this);
  }
}

export class ChangeRecoveryAddressForCall__Inputs {
  _call: ChangeRecoveryAddressForCall;

  constructor(call: ChangeRecoveryAddressForCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recovery(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get sig(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class ChangeRecoveryAddressForCall__Outputs {
  _call: ChangeRecoveryAddressForCall;

  constructor(call: ChangeRecoveryAddressForCall) {
    this._call = call;
  }
}

export class DisableTrustedOnlyCall extends ethereum.Call {
  get inputs(): DisableTrustedOnlyCall__Inputs {
    return new DisableTrustedOnlyCall__Inputs(this);
  }

  get outputs(): DisableTrustedOnlyCall__Outputs {
    return new DisableTrustedOnlyCall__Outputs(this);
  }
}

export class DisableTrustedOnlyCall__Inputs {
  _call: DisableTrustedOnlyCall;

  constructor(call: DisableTrustedOnlyCall) {
    this._call = call;
  }
}

export class DisableTrustedOnlyCall__Outputs {
  _call: DisableTrustedOnlyCall;

  constructor(call: DisableTrustedOnlyCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RecoverCall extends ethereum.Call {
  get inputs(): RecoverCall__Inputs {
    return new RecoverCall__Inputs(this);
  }

  get outputs(): RecoverCall__Outputs {
    return new RecoverCall__Outputs(this);
  }
}

export class RecoverCall__Inputs {
  _call: RecoverCall;

  constructor(call: RecoverCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get sig(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class RecoverCall__Outputs {
  _call: RecoverCall;

  constructor(call: RecoverCall) {
    this._call = call;
  }
}

export class RecoverForCall extends ethereum.Call {
  get inputs(): RecoverForCall__Inputs {
    return new RecoverForCall__Inputs(this);
  }

  get outputs(): RecoverForCall__Outputs {
    return new RecoverForCall__Outputs(this);
  }
}

export class RecoverForCall__Inputs {
  _call: RecoverForCall;

  constructor(call: RecoverForCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recoveryDeadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get recoverySig(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get toDeadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get toSig(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class RecoverForCall__Outputs {
  _call: RecoverForCall;

  constructor(call: RecoverForCall) {
    this._call = call;
  }
}

export class RegisterCall extends ethereum.Call {
  get inputs(): RegisterCall__Inputs {
    return new RegisterCall__Inputs(this);
  }

  get outputs(): RegisterCall__Outputs {
    return new RegisterCall__Outputs(this);
  }
}

export class RegisterCall__Inputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get recovery(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RegisterCall__Outputs {
  _call: RegisterCall;

  constructor(call: RegisterCall) {
    this._call = call;
  }

  get fid(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RegisterForCall extends ethereum.Call {
  get inputs(): RegisterForCall__Inputs {
    return new RegisterForCall__Inputs(this);
  }

  get outputs(): RegisterForCall__Outputs {
    return new RegisterForCall__Outputs(this);
  }
}

export class RegisterForCall__Inputs {
  _call: RegisterForCall;

  constructor(call: RegisterForCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recovery(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get sig(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class RegisterForCall__Outputs {
  _call: RegisterForCall;

  constructor(call: RegisterForCall) {
    this._call = call;
  }

  get fid(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetTrustedCallerCall extends ethereum.Call {
  get inputs(): SetTrustedCallerCall__Inputs {
    return new SetTrustedCallerCall__Inputs(this);
  }

  get outputs(): SetTrustedCallerCall__Outputs {
    return new SetTrustedCallerCall__Outputs(this);
  }
}

export class SetTrustedCallerCall__Inputs {
  _call: SetTrustedCallerCall;

  constructor(call: SetTrustedCallerCall) {
    this._call = call;
  }

  get _trustedCaller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTrustedCallerCall__Outputs {
  _call: SetTrustedCallerCall;

  constructor(call: SetTrustedCallerCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get sig(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }
}

export class TransferForCall extends ethereum.Call {
  get inputs(): TransferForCall__Inputs {
    return new TransferForCall__Inputs(this);
  }

  get outputs(): TransferForCall__Outputs {
    return new TransferForCall__Outputs(this);
  }
}

export class TransferForCall__Inputs {
  _call: TransferForCall;

  constructor(call: TransferForCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get fromDeadline(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get fromSig(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get toDeadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get toSig(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class TransferForCall__Outputs {
  _call: TransferForCall;

  constructor(call: TransferForCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class TrustedRegisterCall extends ethereum.Call {
  get inputs(): TrustedRegisterCall__Inputs {
    return new TrustedRegisterCall__Inputs(this);
  }

  get outputs(): TrustedRegisterCall__Outputs {
    return new TrustedRegisterCall__Outputs(this);
  }
}

export class TrustedRegisterCall__Inputs {
  _call: TrustedRegisterCall;

  constructor(call: TrustedRegisterCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recovery(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class TrustedRegisterCall__Outputs {
  _call: TrustedRegisterCall;

  constructor(call: TrustedRegisterCall) {
    this._call = call;
  }

  get fid(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}
